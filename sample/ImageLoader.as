package  {	import flash.accessibility.*;	import flash.display.*;	import flash.errors.*;	import flash.events.*;	import flash.external.*;	import flash.filters.*;	import flash.geom.*;	import flash.media.*;	import flash.net.*;	import flash.printing.*;	import flash.system.*;	import flash.text.*;	import flash.ui.*;	import flash.utils.*;	import flash.xml.*;	import adobe.utils.*;	import com.hurlant.crypto.Crypto;	import com.hurlant.crypto.symmetric.ICipher;	import com.hurlant.crypto.symmetric.IPad;	import com.hurlant.crypto.symmetric.IVMode;	import com.hurlant.crypto.symmetric.NullPad;	import com.hurlant.util.Hex;			public class ImageLoader extends MovieClip {		private var datLoader:URLLoader;		private var loader:Loader;				public function ImageLoader() {			loadImage();		}		private function loadImage():void {			datLoader = new URLLoader();			datLoader.dataFormat = URLLoaderDataFormat.BINARY;			datLoader.addEventListener(Event.COMPLETE, loadImageDatComplete);			datLoader.load(new URLRequest("image_crypt.swf"));		}		private function loadImageDatComplete(evt:Event):void {			var crypt:ICipher = getCrypt();			var orgByte:ByteArray = datLoader.data as ByteArray;			datLoader.removeEventListener(Event.COMPLETE, loadImageDatComplete);			datLoader.close();			datLoader = null;						var headSize:Number = Math.min(1024 * 100, orgByte.length);			var convertData:ByteArray = new ByteArray();			convertData.writeBytes(orgByte, 0, headSize);			crypt.decrypt(convertData);						if (headSize < orgByte.length) {				convertData.writeBytes(orgByte, headSize, orgByte.length - headSize);			}			var context:LoaderContext = new LoaderContext();			context.applicationDomain = ApplicationDomain.currentDomain;			loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadImageComplete);			loader.loadBytes(convertData, context);		}		private function loadImageComplete(evt:Event):void {			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadImageComplete);			addChild(loader);		}		private function getCrypt():ICipher {			var pad:IPad = new NullPad();			var key:ByteArray = Hex.toArray(Hex.fromString("65de193be36c7e85b5791acf78bd8b75"));			var crypt:ICipher = Crypto.getCipher('blowfish-cbc', key, pad);						pad.setBlockSize(crypt.getBlockSize());			if (crypt is IVMode) {				var ivmode:IVMode = crypt as IVMode;				ivmode.IV = Hex.toArray("f1e54050");			}			return crypt;		}	}}